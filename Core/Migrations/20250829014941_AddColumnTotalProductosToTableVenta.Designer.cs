// <auto-generated />
using System;
using Core.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(AtlasDbContext))]
    [Migration("20250829014941_AddColumnTotalProductosToTableVenta")]
    partial class AddColumnTotalProductosToTableVenta
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Atlas.Core.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("Categoria_PK");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Imagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<byte[]>("Info")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("Imagen_PK");

                    b.ToTable("Imagen");
                });

            modelBuilder.Entity("Atlas.Core.Entities.ImagenProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImagenId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("ImagenProducto_PK");

                    b.HasIndex("ImagenId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ImagenProducto");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("Permiso_PK");

                    b.ToTable("Permiso");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte>("Existencia")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ExistenciaMaxima")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ExistenciaMinima")
                        .HasColumnType("tinyint");

                    b.Property<string>("Genero")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("PrecioMayoreo")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Talla")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("Producto_PK");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("NewTable_PK");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("Atlas.Core.Entities.RolPermiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermisoId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("RolPermiso_PK");

                    b.HasIndex("PermisoId");

                    b.HasIndex("RolId");

                    b.ToTable("RolPermiso");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("Usuario_PK");

                    b.HasIndex("RolId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Core.Models.Entities.ProductoVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VentaId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("ProductoVenta_PK");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("ProductoVenta");
                });

            modelBuilder.Entity("Core.Models.Entities.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cambio")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Pago")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<decimal>("TotalProductos")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("Venta_PK");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Atlas.Core.Entities.ImagenProducto", b =>
                {
                    b.HasOne("Atlas.Core.Entities.Imagen", "Imagen")
                        .WithMany("ImagenProductos")
                        .HasForeignKey("ImagenId")
                        .IsRequired()
                        .HasConstraintName("ImagenProducto_Imagen_FK");

                    b.HasOne("Atlas.Core.Entities.Producto", "Producto")
                        .WithMany("ImagenProductos")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("ImagenProducto_Producto_FK");

                    b.Navigation("Imagen");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Producto", b =>
                {
                    b.HasOne("Atlas.Core.Entities.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .IsRequired()
                        .HasConstraintName("Producto_Categoria_FK");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Atlas.Core.Entities.RolPermiso", b =>
                {
                    b.HasOne("Atlas.Core.Entities.Permiso", "Permiso")
                        .WithMany("RolPermisos")
                        .HasForeignKey("PermisoId")
                        .IsRequired()
                        .HasConstraintName("RolPermiso_Permiso_FK");

                    b.HasOne("Atlas.Core.Entities.Rol", "Rol")
                        .WithMany("RolPermisos")
                        .HasForeignKey("RolId")
                        .IsRequired()
                        .HasConstraintName("RolPermiso_Rol_FK");

                    b.Navigation("Permiso");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Usuario", b =>
                {
                    b.HasOne("Atlas.Core.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .IsRequired()
                        .HasConstraintName("Usuario_Rol_FK");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Core.Models.Entities.ProductoVenta", b =>
                {
                    b.HasOne("Atlas.Core.Entities.Producto", "Producto")
                        .WithMany("ProductoVenta")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("ProductoVenta_Producto_FK");

                    b.HasOne("Core.Models.Entities.Venta", "Venta")
                        .WithMany("ProductoVenta")
                        .HasForeignKey("VentaId")
                        .IsRequired()
                        .HasConstraintName("ProductoVenta_Venta_FK");

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Imagen", b =>
                {
                    b.Navigation("ImagenProductos");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Permiso", b =>
                {
                    b.Navigation("RolPermisos");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Producto", b =>
                {
                    b.Navigation("ImagenProductos");

                    b.Navigation("ProductoVenta");
                });

            modelBuilder.Entity("Atlas.Core.Entities.Rol", b =>
                {
                    b.Navigation("RolPermisos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Models.Entities.Venta", b =>
                {
                    b.Navigation("ProductoVenta");
                });
#pragma warning restore 612, 618
        }
    }
}
